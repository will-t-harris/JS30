SSH-AGENT(1)                           BSD General Commands Manual                           SSH-AGENT(1)

NNAAMMEE
     sssshh--aaggeenntt — authentication agent

SSYYNNOOPPSSIISS
     sssshh--aaggeenntt [--cc | --ss] [--DDdd] [--aa _b_i_n_d___a_d_d_r_e_s_s] [--EE _f_i_n_g_e_r_p_r_i_n_t___h_a_s_h] [--PP _p_k_c_s_1_1___w_h_i_t_e_l_i_s_t] [--tt _l_i_f_e]
               [_c_o_m_m_a_n_d [_a_r_g _._._.]]
     sssshh--aaggeenntt [--cc | --ss] --kk

DDEESSCCRRIIPPTTIIOONN
     sssshh--aaggeenntt is a program to hold private keys used for public key authentication (RSA, DSA, ECDSA,
     Ed25519).  sssshh--aaggeenntt is usually started in the beginning of an X-session or a login session, and all
     other windows or programs are started as clients to the ssh-agent program.  Through use of environ‐
     ment variables the agent can be located and automatically used for authentication when logging in to
     other machines using ssh(1).

     The agent initially does not have any private keys.  Keys are added using ssh(1) (see AAddddKKeeyyssTTooAAggeenntt
     in ssh_config(5) for details) or ssh-add(1).  Multiple identities may be stored in sssshh--aaggeenntt concur‐
     rently and ssh(1) will automatically use them if present.  ssh-add(1) is also used to remove keys
     from sssshh--aaggeenntt and to query the keys that are held in one.

     The options are as follows:

     --aa _b_i_n_d___a_d_d_r_e_s_s
             Bind the agent to the UNIX-domain socket _b_i_n_d___a_d_d_r_e_s_s.  The default is
             _$_T_M_P_D_I_R_/_s_s_h_-_X_X_X_X_X_X_X_X_X_X_/_a_g_e_n_t_._<_p_p_i_d_>.

     --cc      Generate C-shell commands on stdout.  This is the default if SHELL looks like it's a csh
             style of shell.

     --DD      Foreground mode.  When this option is specified sssshh--aaggeenntt will not fork.

     --dd      Debug mode.  When this option is specified sssshh--aaggeenntt will not fork and will write debug
             information to standard error.

     --EE _f_i_n_g_e_r_p_r_i_n_t___h_a_s_h
             Specifies the hash algorithm used when displaying key fingerprints.  Valid options are:
             “md5” and “sha256”.  The default is “sha256”.

     --kk      Kill the current agent (given by the SSH_AGENT_PID environment variable).

     --PP _p_k_c_s_1_1___w_h_i_t_e_l_i_s_t
             Specify a pattern-list of acceptable paths for PKCS#11 shared libraries that may be added
             using the --ss option to ssh-add(1).  The default is to allow loading PKCS#11 libraries from
             “/usr/lib/*,/usr/local/lib/*”.  PKCS#11 libraries that do not match the whitelist will be
             refused.  See PATTERNS in ssh_config(5) for a description of pattern-list syntax.

     --ss      Generate Bourne shell commands on stdout.  This is the default if SHELL does not look like
             it's a csh style of shell.

     --tt _l_i_f_e
             Set a default value for the maximum lifetime of identities added to the agent.  The lifetime
             may be specified in seconds or in a time format specified in sshd_config(5).  A lifetime
             specified for an identity with ssh-add(1) overrides this value.  Without this option the
             default maximum lifetime is forever.

     If a command line is given, this is executed as a subprocess of the agent.  When the command dies,
     so does the agent.

     The idea is that the agent is run in the user's local PC, laptop, or terminal.  Authentication data
     need not be stored on any other machine, and authentication passphrases never go over the network.
     However, the connection to the agent is forwarded over SSH remote logins, and the user can thus use
     the privileges given by the identities anywhere in the network in a secure way.

     There are two main ways to get an agent set up: The first is that the agent starts a new subcommand
     into which some environment variables are exported, eg sssshh--aaggeenntt xxtteerrmm &&.  The second is that the
     agent prints the needed shell commands (either sh(1) or csh(1) syntax can be generated) which can be
     evaluated in the calling shell, eg eevvaall ``sssshh--aaggeenntt --ss`` for Bourne-type shells such as sh(1) or
     ksh(1) and eevvaall ``sssshh--aaggeenntt --cc`` for csh(1) and derivatives.

     Later ssh(1) looks at these variables and uses them to establish a connection to the agent.

     The agent will never send a private key over its request channel.  Instead, operations that require
     a private key will be performed by the agent, and the result will be returned to the requester.
     This way, private keys are not exposed to clients using the agent.

     A UNIX-domain socket is created and the name of this socket is stored in the SSH_AUTH_SOCK environ‐
     ment variable.  The socket is made accessible only to the current user.  This method is easily
     abused by root or another instance of the same user.

     The SSH_AGENT_PID environment variable holds the agent's process ID.

     The agent exits automatically when the command given on the command line terminates.

     In Debian, sssshh--aaggeenntt is installed with the set-group-id bit set, to prevent ptrace(2) attacks
     retrieving private key material.  This has the side-effect of causing the run-time linker to remove
     certain environment variables which might have security implications for set-id programs, including
     LD_PRELOAD, LD_LIBRARY_PATH, and TMPDIR.  If you need to set any of these environment variables, you
     will need to do so in the program executed by ssh-agent.

FFIILLEESS
     $TMPDIR/ssh-XXXXXXXXXX/agent.<ppid>
             UNIX-domain sockets used to contain the connection to the authentication agent.  These sock‐
             ets should only be readable by the owner.  The sockets should get automatically removed when
             the agent exits.

SSEEEE AALLSSOO
     ssh(1), ssh-add(1), ssh-keygen(1), sshd(8)

AAUUTTHHOORRSS
     OpenSSH is a derivative of the original and free ssh 1.2.12 release by Tatu Ylonen.  Aaron Campbell,
     Bob Beck, Markus Friedl, Niels Provos, Theo de Raadt and Dug Song removed many bugs, re-added newer
     features and created OpenSSH.  Markus Friedl contributed the support for SSH protocol versions 1.5
     and 2.0.

BSD                                         November 30, 2016                                         BSD
